
template<typename T>
class List
{
	template<typename T>
	class Node
	{
	public:
		Node* pNext;
		T data;
		Node(T data = T(), Node* pNext = nullptr)
		{
			this->data = data;
			this->pNext = pNext;
		}
	};

	int size;
	Node<T>* head;

public:
	List() { size = 0; head = nullptr; }
	~List() { clear(); }
	void push_back(T data);
	void push_front(T data);

	void pop_front();
	void pop_back();
	void remove(int index);
	void clear();

	int GetSize() { return size; }
	T GetItem(int index);
};

template<typename T>
inline void List<T>::push_back(T data)
{
	if (head == nullptr)
	{
		head = new Node<T>(data);
	}
	else
	{
		Node<T>* search = head;
		while (search->pNext)
		{
			search = search->pNext;
		}
		search->pNext = new Node<T>(data);
	}
	size++;
}

template<typename T>
inline void List<T>::push_front(T data)
{
	head = new Node<T>(data, head);
	size++;
}

template<typename T>
inline void List<T>::pop_front()
{
	if (head)
	{
		Node<T>* toDelete = head;
		head = head->pNext;
		delete toDelete;
		size--;
	}
}

template<typename T>
inline void List<T>::pop_back()
{
	if (head)
	{
		Node<T>* previous = head;
		for (int i = 0; i < size - 2; i++)
		{
			previous = previous->pNext;
		}
		Node<T>* toDelete = previous->pNext;
		delete toDelete;
		previous->pNext = nullptr;
		size--;
	}
}

template<typename T>
inline void List<T>::remove(int index)
{
	if (index >= size) return;

	if (index == 0) pop_front();
	else if (index == size - 1) pop_back();
	else
	{
		Node<T>* previous = head;
		while (previous)
		{
			if (index - 1 == 0)
			{
				Node<T>* toDelete = previous->pNext;
				previous->pNext = toDelete->pNext;
				delete toDelete;
				size--;
			}
			previous = previous->pNext;
			index--;
		}
	}
}

template<typename T>
inline void List<T>::clear()
{
	if (!size) return;

	Node<T>* toDelete = nullptr;
	while (head)
	{
		toDelete = head;
		head = head->pNext;
		delete toDelete;
		size--;
	}
}

template<typename T>
inline T List<T>::GetItem(int index)
{
	Node<T>* toRet = head;
	while (toRet)
	{
		if (!index) return toRet->data;
		toRet = toRet->pNext;
		index--;
	}
	return T();
}
